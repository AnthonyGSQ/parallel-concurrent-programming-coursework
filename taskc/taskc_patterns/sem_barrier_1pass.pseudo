procedure main()
  // How many threads have arrived to the barrier
  shared count := 0
  // Protects the increment of the count
  shared can_access_count := create_semaphore(1)
  // Locked (0) until all threads arrive, then it is unlocked (1)
  shared barrier := create_semaphore(0)
  shared secondary_barrier := create_semaphore(0)
  // Read thread count from standard input
  input shared const thread_count as integer
  // Create a thread team running secondary
  create_threads(thread_count, secondary)
  join_threads(thread_count)
end procedure

procedure secondary()
  while true do
    Statement A
    wait(can_access_count)
      count++
    signal(can_access_count)
    // Adapt rendezvous solution here
    // Statement B can be only executed until all threads have run Statement A
    if (count == thread_count) {
      signal(barrier, thread_count)
      count := 0
    }
    wait(barrier)

    Statement B
    wait(can_access_count)
      count++
    signal(can_access_count)
    // Adapt rendezvous solution here
    // Statement B can be only executed until all threads have run Statement A
    if (count == thread_count) {
      signal(secondary_barrier, thread_count)
      count := 0
    }
    wait(secondary_barrier)
  end while
end procedure
