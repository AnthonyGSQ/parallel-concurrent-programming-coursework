procedure main(argc, argv[]):
  if argc = 7 then
  // guardamos cada parametro recibido del usuario en su respectiva variable
    shared buffer_capacity := integer(argv[1])
    shared buffer as array of buffer_capacity of float
    shared rounds := integer(argv[2])
    shared producer_min_delay := integer(argv[3])
    shared producer_max_delay := integer(argv[4])
    shared consumer_min_delay := integer(argv[5])
    shared consumer_max_delay := integer(argv[6])
    // el semaforo inicializa con un can_produce de buffer_capacity pues
    // el buffer se encuentra vacio en un inicio
    shared can_produce :+ create_semaphore(buffer_capacity)
    // en un inicio el buffer se encuentra vacio, por ende
    // inicializamos el semaforo indicando que no se pueden consumir
    // elementos
    shared can_consume :+ create_semaphore(0)

    create_threads(1, produce)
    create_threads(1, consume)
  end if
end procedure

procedure produce:
  declare count := 0
  for round := 1 to rounds do
    for index := 0 to buffer_capacity do
      // antes de producir vemos si hay espacio en el buffer
      wait(can_produce)
      // esperamos x tiempo para producir el producto, dicho tiempo
      // se encuentra entre el intervalo min_delay-max_delay.
      delay(random_between(producer_min_delay, producer_max_delay))
      buffer[index] := ++count
      print("Produced ", buffer[index])
      // una vez hemos producido un producto, avisamos al consumidor
      // que puede consumir un producto
      signal(can_consume)
    end for
  end for
end procedure

procedure consume:
  for round := 1 to rounds do
    for index := 0 to buffer_capacity do
      // antes de consumir vemos si hay algo para consumir
      wait(can_produce)
      value := buffer[index]
      delay(random_between(consumer_min_delay, consumer_max_delay))
      print("Consumed ", value)
      // avisamos al productor que hemos consumido un producto
      // y por ende hay un espacio libre para producir
      signal(can_produce)
    end for
  end for
end procedure

function random_between(min, max):
  return min + rand() % (max - min)
end function
